import 'package:flutter/material.dart';

void main() {
  runApp(HealthCareApp());
}

class HealthCareApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Smart HealthCare',
      initialRoute: '/',
      routes: {
        '/': (context) => StartScreen(),
        '/ageEntry': (context) => AgeEntryScreen(),
        '/healthFunctions': (context) => HealthFunctionsScreen(),
        '/BloodPressureMeasurement' :(context)=>BloodPressureMeasurementScreen(),
        '/HeartRateMeasurement': (context) => HeartRateMeasurementScreen(),
      },
      debugShowCheckedModeBanner: false,
    );
  }
}

class StartScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('ROBOT healthcare'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Robot chăm sóc sức khỏe xin chào',
              style: TextStyle(fontSize: 20),
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.pushNamed(context, '/ageEntry');
              },
              child: Text('Bắt đầu'),
            ),
          ],
        ),
      ),
    );
  }
}

class AgeEntryScreen extends StatefulWidget {
  @override
  _AgeEntryScreenState createState() => _AgeEntryScreenState();
}

class _AgeEntryScreenState extends State<AgeEntryScreen> {
  int age = 0;
  TextEditingController _ageController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _ageController.text = age.toString();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Hãy nhập vào số tuổi của bạn'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Số tuổi của bạn là:',
              style: TextStyle(fontSize: 20),
            ),
            TextField(
              controller: _ageController,
              keyboardType: TextInputType.number,
              decoration: InputDecoration(
                labelText: 'Age',
              ),
            ),
            ElevatedButton(
              onPressed: () async {
                final enteredAge = int.tryParse(_ageController.text);
                if (enteredAge != null) {
                  setState(() {
                    age = enteredAge;
                  });

                  // Save the age and move to the next screen
                  final result = await Navigator.pushNamed(context, '/healthFunctions', arguments: age);
                  if (result != null) {
                    // Handle the result from the next screen if needed
                  }
                } else {
                  // Handle invalid age input
                }
              },
              child: Text('Tiếp tục'),
            ),
          ],
        ),
      ),
    );
  }

}

class HealthFunctionsScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Health Functions'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Welcome to Health Functions!',
              style: TextStyle(fontSize: 20),
            ),
            ElevatedButton(
              onPressed: () {
                // Navigate to the BloodPressureMeasurementScreen
                Navigator.pushNamed(context, '/BloodPressureMeasurement');
              },
              child: Text('Chức năng đo huyết áp'),
            ),
            ElevatedButton(
              onPressed: () {
                // Add other health function logic here
                Navigator.pushNamed(context, '/HeartRateMeasurement');
              },
              child: Text('Chức năng đo nhịp tim'),
            ),
            ElevatedButton(
              onPressed: () {
                // Add other health function logic here
              },
              child: Text('Other Function 2'),
            ),
          ],
        ),
      ),
    );
  }
}
class BloodPressureMeasurementScreen extends StatefulWidget {
  @override
  _BloodPressureMeasurementScreenState createState() => _BloodPressureMeasurementScreenState();
}

class _BloodPressureMeasurementScreenState
    extends State<BloodPressureMeasurementScreen> {
  int huyetaptamthu = 0;
  int huyetaptamtruong = 0;

  @override
  Widget build(BuildContext context) {
    // Calculate the blood pressure status based on your conditions
    String bloodPressureStatus = '';

    if (huyetaptamthu == 0 && huyetaptamtruong == 0) {
      bloodPressureStatus = ''; // No text to display
    } else if (huyetaptamthu < 60 || huyetaptamtruong < 90) {
      bloodPressureStatus = 'Huyết áp thấp';
    } else if (huyetaptamthu < 80 || huyetaptamtruong < 120) {
      bloodPressureStatus = 'Huyết áp bình thường';
    } else if (huyetaptamthu < 90 || huyetaptamtruong < 140) {
      bloodPressureStatus = 'Huyết áp tiền cao';
    } else if (huyetaptamthu < 100 || huyetaptamtruong < 190) {
      bloodPressureStatus = 'Huyết áp cao';
    }

    // Determine the text color based on the blood pressure status
    Color textColor = Colors.black; // Default color

    if (bloodPressureStatus == 'Huyết áp thấp') {
      textColor = Colors.green;
    } else if (bloodPressureStatus == 'Huyết áp bình thường') {
      textColor = Colors.blue;
    } else if (bloodPressureStatus == 'Huyết áp tiền cao') {
      textColor = Colors.pink;
    } else if (bloodPressureStatus == 'Huyết áp cao') {
      textColor = Colors.red;
    }


    return Scaffold(
      appBar: AppBar(
        title: Text('Đo Huyết Áp'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Enter Systolic Pressure (Huyết áp tâm thu):',
              style: TextStyle(fontSize: 20),
            ),
            TextFormField(
              keyboardType: TextInputType.number,
              onChanged: (value) {
                setState(() {
                  huyetaptamthu = int.tryParse(value) ?? 0;
                });
              },
            ),
            Text(
              'Enter Diastolic Pressure (Huyết áp tâm trương):',
              style: TextStyle(fontSize: 20),
            ),
            TextFormField(
              keyboardType: TextInputType.number,
              onChanged: (value) {
                setState(() {
                  huyetaptamtruong = int.tryParse(value) ?? 0;
                });
              },
            ),
            ElevatedButton(
              onPressed: () {
                // Implement blood pressure calculation logic here
                // For example, you can calculate and display the result based on huyetaptamthu and huyetaptamtruong values.
              },
              child: Text('Calculate Blood Pressure'),
            ),
            // Display the blood pressure status text
            Text(
              bloodPressureStatus,
              style: TextStyle(fontSize: 20, color: textColor),
            ),
            Text(
              'Huyết áp tâm thu: $huyetaptamthu',
              style: TextStyle(fontSize: 20),
            ),
            Text(
              'Huyết áp tâm trương: $huyetaptamtruong',
              style: TextStyle(fontSize: 20),
            ),
          ],
        ),
      ),
    );
  }
}
class HeartRateMeasurementScreen extends StatefulWidget {
  @override
  _HeartRateMeasurementScreenState createState() => _HeartRateMeasurementScreenState();
}

class _HeartRateMeasurementScreenState extends State<HeartRateMeasurementScreen> {
  int heartRate = 0;

  @override
  Widget build(BuildContext context) {
    String heartstatus;
    Color textColor1 = Colors.red;
    if(heartRate==0){heartstatus='';}
    else if(heartRate < 60 ){
      heartstatus='nhịp tim thấp';
    }
    else if(heartRate > 100 ){
      heartstatus='nhịp tim cao';
    }
    else heartstatus='nhịp tim bình thường';


    return Scaffold(
      appBar: AppBar(
        title: Text('Heart Rate Measurement'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Enter Heart Rate:',
              style: TextStyle(fontSize: 20),
            ),
            TextFormField(
              keyboardType: TextInputType.number,
              onChanged: (value) {
                setState(() {
                  heartRate = int.tryParse(value) ?? 0;
                });
              },
            ),
            ElevatedButton(
              onPressed: () {
                // Implement heart rate calculation logic here
                // For example, you can calculate and display the result based on the heartRate value.
              },
              child: Text('Calculate Heart Rate'),
            ),
            // Display the heart rate result
            Text(
              heartstatus,
              style: TextStyle(fontSize: 20, color: textColor1),
            ),
            Text(
              'Nhịp tim của bạn: $heartRate bpm',
              style: TextStyle(fontSize: 20),
            ),
          ],
        ),
      ),
    );
  }
}
